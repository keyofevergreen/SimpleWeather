{"version":3,"sources":["store/weatherReducer/actionTypes.js","helpers/fetchData.js","helpers/getArrOfHours.js","store/weatherReducer/weatherReducer.js","store/favoriteCitiesReducer/actionTypes.js","store/favoriteCitiesReducer/favoriteCitiesReducer.js","store/store.js","historyVar.js","components/UI/IconBackButton.js","components/CitiesPageBackButton.js","icons-sprites/day-sprites.svg","icons-sprites/night-sprites.svg","components/WeatherIcon.js","components/CitiesList.js","components/TempScaleToggle.js","pages/CitiesPage.js","components/UI/FavoriteButton.js","components/FavoriteCityButton.js","components/UI/ListButton.js","helpers/useDebounce.js","components/CitySearch.js","components/UI/OutlinedButton.js","components/ForecastPageButtonLink.js","components/WeatherTempScale.js","components/WeatherCondition.js","components/CurrentForecast.js","pages/CityPage.js","components/ForecastPageBackButton.js","components/ForecastSwiper.js","components/ForecastToggle.js","pages/ForecastPage.js","pages/SearchPage.js","App.js","index.js"],"names":["SET_CITY","SET_WEATHER","CHANGE_TEMP_SCALE","SET_HOURLY_FORECAST","CHANGE_FORECAST_MODE","fetchData","location","days","a","fetch","response","json","data","console","error","getArrOfHours","currentDay","nextDay","localtime","borderingPoint","hours","currentHour","low","high","length","mid","Math","floor","hour","moment","time","format","binarySearch","slice","concat","setCity","city","type","payload","setWeather","changeTempScale","changeForecastMod","setHourlyForecast","map","temp_c","temp_f","isDay","is_day","code","condition","isRain","will_it_rain","initialState","responseLocation","country","wind","pressure","humidity","tempScale","hourlyForecast","threeDayForecast","forecastMod","localTime","ADD_TO_FAVORITES","REMOVE_FROM_FAVORITES","GET_CITIES","UPDATE_TEMP","updateTemp","citiesState","arrOfCities","addToFavorites","dispatch","store","addCity","removeFromFavorites","removeCity","composedEnhancer","composeWithDevTools","applyMiddleware","thunkMiddleware","rootReducer","combineReducers","cities","state","action","lastUpdated","filter","obj","name","toLowerCase","current","toFixed","Date","now","weatherData","text","wind_kph","pressure_mb","forecast","forecastday","day","date","avgtemp_c","avgtemp_f","createStore","history","createBrowserHistory","IconBackButton","props","IconButton","size","fontSize","CitiesPageBackButton","to","className","sx","color","backgroundColor","WeatherIcon","hrefToIcon","night","style","xmlns","xmlnsXlink","href","connect","updateCityInStore","router","useHistory","onClick","push","fill","value","localStorage","getItem","setItem","useState","setValue","ToggleButtonGroup","exclusive","fullWidth","borderColor","textTransform","height","onChange","ToggleButton","borderRadius","fetchCityTemp","currentDate","useEffect","forEach","JSON","stringify","FavoriteButton","Checkbox","icon","FavoriteBorder","checkedIcon","Favorite","objOfCity","find","isFavorite","setFavorite","isDisabled","setDisabled","disabled","checked","ListButton","useDebounce","delay","debouncedValue","setDebouncedValue","handler","setTimeout","clearTimeout","favoriteCities","event","target","debouncedLocation","trim","memoLoadWeather","useCallback","fetchWeather","minWidth","inputStyle","fontWeight","display","e","OutlinedButton","children","Button","variant","ForecastPageButtonLink","marginTop","boxShadow","windToMPS","pressureToMmOfMercury","params","useParams","ForecastPageBackButton","SwiperCore","use","Pagination","slidesPerView","pagination","calendar","sameDay","nextWeek","restHours","paddingTop","borderTop","App","exact","path","citiesStr","parse","theme","createTheme","palette","primary","main","darker","secondary","rootElement","document","getElementById","ReactDOM","render","basename"],"mappings":"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","file":"static/js/main.57cf2d33.chunk.js","sourcesContent":["export const SET_CITY = 'SET_CITY';\r\nexport const SET_WEATHER = 'SET_WEATHER';\r\nexport const CHANGE_TEMP_SCALE = 'CHANGE_TEMP_SCALE';\r\nexport const SET_HOURLY_FORECAST = 'SET_HOURLY_FORECAST';\r\nexport const CHANGE_FORECAST_MODE = 'CHANGE_FORECAST_MODE';","const fetchData = async (location, days) => {\r\n    try {\r\n        const response = await fetch(`https://api.weatherapi.com/v1/forecast.json?key=bec0a55c5686475981d152146211810&q=${location}&days=${days}&aqi=no&alerts=no`);\r\n        const data = await response.json();\r\n        return data;\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nexport default fetchData;","import moment from \"moment\";\r\n\r\nconst getArrOfHours = (currentDay, nextDay, localtime) => {\r\n    // In case there are more than a million hours in one day( It's a joke. Just practiced binary search ).\r\n    const binarySearch = (hours, currentHour) => {\r\n        let low = 0;\r\n        let high = hours.length - 1;\r\n\r\n        while(low <= high) {\r\n            const mid = Math.floor((low + high) / 2);\r\n            const hour = moment(hours[mid].time, 'YYYY-MM-DD hh:mm').format('HH');\r\n            if(hour === currentHour) {\r\n                return mid;\r\n            }\r\n            if(hour > currentHour) {\r\n                high = mid - 1;\r\n            } else {\r\n                low = mid + 1;\r\n            }\r\n        }\r\n\r\n    }\r\n    const borderingPoint = binarySearch(currentDay, moment(localtime, 'YYYY-MM-DD HH:mm').format('HH'));\r\n    // create new array of Hours since current hour\r\n    return currentDay.slice(borderingPoint).concat(nextDay.slice(0, borderingPoint));\r\n}\r\n\r\nexport default getArrOfHours;","import store from \"../store\";\r\nimport {\r\n    CHANGE_FORECAST_MODE,\r\n    CHANGE_TEMP_SCALE,\r\n    SET_CITY,\r\n    SET_HOURLY_FORECAST,\r\n    SET_WEATHER\r\n} from \"./actionTypes\";\r\nimport fetchData from \"../../helpers/fetchData\";\r\nimport getArrOfHours from \"../../helpers/getArrOfHours\";\r\n\r\nexport const setCity = (city) => ({type: SET_CITY, payload: city})\r\nexport const setWeather = (response) => ({type: SET_WEATHER, payload: response})\r\nexport const changeTempScale = (response) => ({type: CHANGE_TEMP_SCALE, payload: response})\r\nexport const changeForecastMod = (response) => ({type: CHANGE_FORECAST_MODE, payload: response})\r\nexport const setHourlyForecast = (response) => ({\r\n    type: SET_HOURLY_FORECAST, payload: response.map((hour) => {\r\n        return {\r\n            temp_c: hour.temp_c,\r\n            temp_f: hour.temp_f,\r\n            hour: hour.time,\r\n            isDay: hour.is_day,\r\n            code: hour.condition.code,\r\n            isRain: hour.will_it_rain\r\n        };\r\n    })\r\n})\r\n\r\nexport const initialState = {\r\n    location: '',\r\n    responseLocation: '',\r\n    country: '',\r\n    temp_c: '',\r\n    temp_f: '',\r\n    condition: '',\r\n    wind: '',\r\n    pressure: '',\r\n    humidity: '',\r\n    code: '',\r\n    isDay: '',\r\n    tempScale: 'celsius',\r\n    hourlyForecast: [],\r\n    threeDayForecast: [],\r\n    forecastMod: 'threeDay',\r\n    localTime: ''\r\n};\r\n\r\nexport function weatherReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case SET_CITY:\r\n            return {...state, location: action.payload.toLowerCase()};\r\n        case SET_WEATHER:\r\n            return {\r\n                ...state,\r\n                responseLocation: action.payload.location.name,\r\n                country: action.payload.location.country,\r\n                temp_c: action.payload.current.temp_c.toFixed(),\r\n                temp_f: action.payload.current.temp_f.toFixed(),\r\n                condition: action.payload.current.condition.text.toLowerCase(),\r\n                wind: action.payload.current.wind_kph,\r\n                pressure: action.payload.current.pressure_mb,\r\n                humidity: action.payload.current.humidity,\r\n                code: action.payload.current.condition.code,\r\n                isDay: action.payload.current.is_day,\r\n                threeDayForecast: action.payload.forecast.forecastday.map((day) => {\r\n                    return {\r\n                        date: day.date,\r\n                        temp_c: day.day.avgtemp_c,\r\n                        temp_f: day.day.avgtemp_f,\r\n                        isDay: '1',\r\n                        code: day.day.condition.code,\r\n                        condition: day.day.condition.text.toLowerCase()\r\n                    }\r\n                }),\r\n                localTime: action.payload.location.localtime\r\n            };\r\n        case SET_HOURLY_FORECAST:\r\n            return {\r\n                ...state,\r\n                hourlyForecast: action.payload\r\n            }\r\n        case CHANGE_TEMP_SCALE:\r\n            return {\r\n                ...state,\r\n                tempScale: action.payload\r\n            };\r\n        case CHANGE_FORECAST_MODE:\r\n            return {\r\n                ...state,\r\n                forecastMod: action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// This API on the free plan provides a maximum of a three-day forecast\r\nexport const fetchWeather = (debouncedLocation, days = 3) => async () => {\r\n    try {\r\n        const data = await (fetchData(debouncedLocation, days));\r\n        store.dispatch(setWeather(data));\r\n        const hourlyForecast = getArrOfHours(data.forecast.forecastday[0].hour, data.forecast.forecastday[1].hour, data.location.localtime);\r\n        store.dispatch(setHourlyForecast(hourlyForecast));\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n}","export const ADD_TO_FAVORITES = \"ADD_TO_FAVORITES\";\r\nexport const REMOVE_FROM_FAVORITES = \"REMOVE_FROM_FAVORITES\";\r\nexport const GET_CITIES = \"GET_CITIES\";\r\nexport const UPDATE_TEMP = \"UPDATE_TEMP\";","import store from \"../store\";\r\nimport {ADD_TO_FAVORITES, GET_CITIES, REMOVE_FROM_FAVORITES, UPDATE_TEMP} from \"./actionTypes\";\r\nimport fetchData from \"../../helpers/fetchData\";\r\n\r\nexport const addCity = (city) => ({type: ADD_TO_FAVORITES, payload: city})\r\nexport const removeCity = (city) => ({type: REMOVE_FROM_FAVORITES, payload: city})\r\nexport const getCitiesFromLocaleStorage = (cities) => ({type: GET_CITIES, payload: cities})\r\nexport const updateTemp = (data) => ({type: UPDATE_TEMP, payload: data})\r\n\r\nexport const citiesState = {\r\n    arrOfCities: [],\r\n};\r\n\r\nexport function favoriteCitiesReducer(state = citiesState, action) {\r\n    switch (action.type) {\r\n        case ADD_TO_FAVORITES:\r\n            return {\r\n                ...state,\r\n                arrOfCities: [...state.arrOfCities, {\r\n                    city: action.payload.city,\r\n                    temp_c: action.payload.temp_c,\r\n                    temp_f: action.payload.temp_f,\r\n                    lastUpdated: action.payload.lastUpdated,\r\n                    isDay: action.payload.isDay,\r\n                    code: action.payload.code\r\n                }]\r\n            };\r\n        case REMOVE_FROM_FAVORITES:\r\n            return {\r\n                ...state,\r\n                arrOfCities: state.arrOfCities.filter(\r\n                    (obj) => obj.city !== action.payload\r\n                ),\r\n            };\r\n        case GET_CITIES:\r\n            return {\r\n                ...state,\r\n                arrOfCities: action.payload,\r\n            };\r\n        case UPDATE_TEMP:\r\n            return {\r\n                ...state,\r\n                arrOfCities: state.arrOfCities.map((obj) => obj.city === action.payload.location.name.toLowerCase() ? {\r\n                    ...obj, temp_c: action.payload.current.temp_c.toFixed(),\r\n                    temp_f: action.payload.current.temp_f.toFixed(),\r\n                    lastUpdated: Date.now(),\r\n                    isDay: action.payload.current.is_day,\r\n                    code: action.payload.current.condition.code\r\n                } : obj)\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const addToFavorites = (city) => (dispatch) => {\r\n    store.dispatch(addCity(city));\r\n};\r\nexport const removeFromFavorites = (city) => (dispatch) => {\r\n    store.dispatch(removeCity(city));\r\n};\r\n\r\nexport const fetchCityTemp = (city) => async (dispatch) => {\r\n    try {\r\n        const data = await (fetchData(city));\r\n        store.dispatch(updateTemp(data));\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n}","import {createStore, combineReducers, applyMiddleware} from 'redux';\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {composeWithDevTools} from 'redux-devtools-extension';\r\nimport {weatherReducer} from \"./weatherReducer/weatherReducer\";\r\nimport {favoriteCitiesReducer} from \"./favoriteCitiesReducer/favoriteCitiesReducer\";\r\n\r\nconst composedEnhancer = composeWithDevTools(applyMiddleware(thunkMiddleware))\r\n\r\nconst rootReducer = combineReducers({\r\n    cities: favoriteCitiesReducer,\r\n    weatherData: weatherReducer\r\n})\r\n\r\nlet store = createStore(rootReducer, composedEnhancer);\r\nexport default store;","import {createBrowserHistory} from 'history';\r\n\r\nexport const history = createBrowserHistory();\r\n","import React from 'react';\r\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\r\nimport {IconButton} from \"@mui/material\";\r\n\r\nconst IconBackButton = (props) => {\r\n    return (\r\n        <IconButton size='large' {...props}>\r\n            <ArrowBackIcon fontSize='large'/>\r\n        </IconButton>\r\n    );\r\n};\r\n\r\nexport default IconBackButton;","import React from \"react\";\r\nimport IconBackButton from \"./UI/IconBackButton\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nconst CitiesPageBackButton = () => {\r\n    return (\r\n        <Link to='/SimpleWeather' className='cities-page__back-btn'>\r\n            <IconBackButton\r\n                sx={{color: '#2D81FF', '&.MuiIconButton-root:hover': {backgroundColor: 'rgba(45, 129, 255, 0.02)'}}}/>\r\n        </Link>\r\n    );\r\n};\r\n\r\nexport default CitiesPageBackButton;\r\n","export default __webpack_public_path__ + \"static/media/day-sprites.c832647d.svg\";","export default __webpack_public_path__ + \"static/media/night-sprites.9e480c26.svg\";","import React from 'react';\r\nimport \"../styles/CurrentForecast.css\";\r\nimport day from '../icons-sprites/day-sprites.svg';\r\nimport night from '../icons-sprites/night-sprites.svg';\r\n\r\nconst WeatherIcon = ({color, code, isDay, ...props}) => {\r\n    const hrefToIcon = `${isDay ? day : night}#${code}`;\r\n\r\n    return (\r\n            <svg {...props} style={color} xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\">\r\n                <use href={hrefToIcon}></use>\r\n            </svg>\r\n    )\r\n\r\n}\r\n\r\nexport default WeatherIcon;","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport \"../styles/CitiesList.css\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport {setCity} from \"../store/weatherReducer/weatherReducer\";\r\nimport WeatherIcon from \"./WeatherIcon\";\r\n\r\nconst CitiesList = (props) => {\r\n    const router = useHistory();\r\n    if (props.cities.length > 0) {\r\n        return (\r\n            <div className='flex cities-list'>\r\n                <div className='blue-line'></div>\r\n                <div className='cities'>\r\n                    {props.cities.map((city) => (\r\n                        <button\r\n                            onClick={() => {\r\n                                router.push(`/SimpleWeather/cities/${city.city}`);\r\n                                props.updateCityInStore(city.city);\r\n                            }}\r\n                            key={city.city}\r\n                            className='cities__btn'\r\n                        >\r\n                            <div>{city.city}</div>\r\n                            <div className='cities__btn-group'>\r\n                                <WeatherIcon className='cities__btn-icon' code={city.code} isDay={city.isDay} color={{fill:'#2D81FF'}}/>\r\n                                <div>{props.tempScale === \"celsius\" ? city.temp_c : city.temp_f}°</div>\r\n                            </div>\r\n                        </button>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        );\r\n    } else {\r\n        return (\r\n            <div className='flex cities-list'>\r\n                <div className='blue-line'></div>\r\n                <div className='cities-empty'>\r\n                    <p>Oops!</p>\r\n                    <p>You haven't added any city yet!</p>\r\n                </div>\r\n                <div className='blue-line'></div>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    cities: state.cities.arrOfCities,\r\n    tempScale: state.weatherData.tempScale,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    updateCityInStore: (city) => {\r\n        dispatch(setCity(city));\r\n    }\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CitiesList);\r\n","import React, {useState} from \"react\";\nimport {ToggleButton, ToggleButtonGroup} from \"@mui/material\";\nimport {connect} from \"react-redux\";\nimport {changeTempScale} from \"../store/weatherReducer/weatherReducer\";\n\nconst TempScaleToggle = (props) => {\n    if (!localStorage.getItem('tempScale')) {\n        localStorage.setItem('tempScale', 'celsius');\n    }\n    const [value, setValue] = useState(localStorage.getItem('tempScale'));\n    return (\n        <ToggleButtonGroup\n            color='secondary'\n            value={value}\n            exclusive\n            fullWidth={true}\n            sx={{\n                '& .MuiToggleButton-root': {\n                    backgroundColor: 'transparent',\n                    borderColor: '#F9FBFF',\n                    color: '#2d81ff',\n                    textTransform: 'capitalize',\n                    '&.Mui-selected': {\n                        backgroundColor: '#6BA6FF',\n                        color: '#ffffff',\n                    },\n                    '&.Mui-selected:hover': {\n                        backgroundColor: '#5096ff',\n                        color: '#ffffff',\n                    }\n                },\n                height: '24px',\n            }}\n            onChange={() => {\n                if (value === 'celsius') {\n                    setValue('fahrenheit')\n                    props.changeTempScale('fahrenheit');\n                    localStorage.setItem('tempScale', 'fahrenheit')\n                } else {\n                    setValue('celsius')\n                    props.changeTempScale('celsius')\n                    localStorage.setItem('tempScale', 'celsius')\n                }\n            }}\n        >\n            <ToggleButton value='fahrenheit' sx={{borderRadius: '20px 0 0 20px'}}>\n                Fahrenheit\n            </ToggleButton>\n            <ToggleButton value='celsius' sx={{borderRadius: '0 20px 20px 0'}}>\n                Celsius\n            </ToggleButton>\n        </ToggleButtonGroup>\n    );\n};\n\nconst mapStateToProps = (state) => ({\n    tempScale: state.weatherData.tempScale,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n    changeTempScale: (value) => {\n        dispatch(changeTempScale(value));\n    },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TempScaleToggle);\n","import React, {useEffect} from \"react\";\r\nimport \"../styles/CitiesPage.css\";\r\nimport CitiesPageBackButton from \"../components/CitiesPageBackButton\";\r\nimport CitiesList from \"../components/CitiesList\";\r\nimport TempScaleToggle from \"../components/TempScaleToggle\";\r\nimport {connect} from \"react-redux\";\r\nimport {fetchCityTemp} from \"../store/favoriteCitiesReducer/favoriteCitiesReducer\";\r\n\r\nconst CitiesPage = (props) => {\r\n    const fifteenMinutes = 90000;\r\n    const currentDate = Date.now();\r\n\r\n    useEffect(() => {\r\n        props.cities.forEach((obj) => {\r\n            if(currentDate - obj.lastUpdated > fifteenMinutes) {\r\n                props.fetchCityTemp(obj.city)\r\n            }\r\n            localStorage.setItem('cities', JSON.stringify(props.cities));\r\n        })\r\n    }, [])\r\n\r\n    return (\r\n        <div className='app app-outlined cities-page'>\r\n            <CitiesPageBackButton/>\r\n            <div className='cities-page__list'>\r\n                <h1 className='cities-page-header'>Favorite cities</h1>\r\n                <CitiesList/>\r\n            </div>\r\n            <div className='cities-page__settings'>\r\n                <h1 className='cities-page-header'>Settings</h1>\r\n                <TempScaleToggle/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    cities: state.cities.arrOfCities\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    fetchCityTemp: (city) => {\r\n        dispatch(fetchCityTemp(city));\r\n    }\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CitiesPage);\r\n","import React from \"react\";\r\nimport {Favorite, FavoriteBorder} from \"@mui/icons-material\";\r\nimport {Checkbox} from \"@mui/material\";\r\n\r\nconst FavoriteButton = (props) => {\r\n    return (\r\n        <Checkbox\r\n            {...props}\r\n            icon={<FavoriteBorder/>}\r\n            checkedIcon={<Favorite/>}\r\n            size='large'\r\n            sx={{\r\n                color: 'white',\r\n                '&.Mui-checked': {\r\n                    color: 'white',\r\n                },\r\n                '&.Mui-disabled': {\r\n                    color: 'transparent',\r\n                }\r\n            }}\r\n        />\r\n    );\r\n};\r\nexport default FavoriteButton;\r\n","import React, {useEffect, useState} from \"react\";\r\nimport FavoriteButton from \"./UI/FavoriteButton\";\r\nimport {connect} from \"react-redux\";\r\nimport {addToFavorites, removeFromFavorites} from \"../store/favoriteCitiesReducer/favoriteCitiesReducer\";\r\n\r\nconst FavoriteCityButton = (props) => {\r\n    const [isFavorite, setFavorite] = useState(props.cities.find(obj => obj.city === props.location))\r\n    const [isDisabled, setDisabled] = useState(false);\r\n\r\n    useEffect(() => {\r\n        setFavorite(props.cities.find(obj => obj.city === props.location));\r\n    }, [props.location]);\r\n\r\n    //Make the button inactive if the city is not found\r\n    useEffect(() => {\r\n        if (\r\n            props.location &&\r\n            props.location === props.responseLocation.toLowerCase()\r\n        ) {\r\n            setDisabled(false);\r\n        } else {\r\n            setDisabled(true);\r\n        }\r\n    }, [props.location, props.responseLocation]);\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem('cities', JSON.stringify(props.cities));\r\n    }, [props.cities]);\r\n\r\n    return (\r\n        <FavoriteButton\r\n            onClick={() => {\r\n                if (!isFavorite) {\r\n                    props.addToFavorites({\r\n                        city: props.location,\r\n                        temp_c: props.temp_c,\r\n                        temp_f: props.temp_f,\r\n                        lastUpdated: Date.now(),\r\n                        isDay: props.isDay,\r\n                        code: props.code\r\n                    });\r\n                    setFavorite(!isFavorite);\r\n                } else {\r\n                    props.removeFromFavorites(props.location);\r\n                    setFavorite(!isFavorite);\r\n                }\r\n            }}\r\n            disabled={isDisabled}\r\n            checked={!!isFavorite}\r\n        />\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    location: state.weatherData.location,\r\n    responseLocation: state.weatherData.responseLocation,\r\n    temp_c: state.weatherData.temp_c,\r\n    temp_f: state.weatherData.temp_f,\r\n    cities: state.cities.arrOfCities,\r\n    isDay: state.weatherData.isDay,\r\n    code: state.weatherData.code,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    addToFavorites: (objOfCity) => {\r\n        dispatch(addToFavorites(objOfCity));\r\n    },\r\n    removeFromFavorites: (city) => {\r\n        dispatch(removeFromFavorites(city));\r\n    },\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FavoriteCityButton);\r\n","import React from \"react\";\r\nimport {IconButton} from \"@mui/material\";\r\nimport FormatListBulletedIcon from '@mui/icons-material/FormatListBulleted';\r\n\r\nconst ListButton = () => {\r\n    return (\r\n        <IconButton size='large' sx={{color: 'white'}}>\r\n            <FormatListBulletedIcon fontSize='large'/>\r\n        </IconButton>\r\n    );\r\n};\r\n\r\nexport default ListButton;\r\n","import {useEffect, useState} from 'react';\r\n\r\nfunction useDebounce(value, delay) {\r\n    const [debouncedValue, setDebouncedValue] = useState(value);\r\n\r\n    useEffect(\r\n        () => {\r\n            const handler = setTimeout(() => setDebouncedValue(value), delay);\r\n            return () => clearTimeout(handler);\r\n        }, [delay, value],\r\n    );\r\n\r\n    return debouncedValue;\r\n}\r\n\r\nexport default useDebounce;","import React, {useCallback, useEffect} from \"react\";\r\nimport AutosizeInput from \"react-input-autosize\";\r\nimport {connect} from \"react-redux\";\r\nimport \"../styles/CitySearch.css\";\r\nimport {fetchWeather, setCity} from \"../store/weatherReducer/weatherReducer\";\r\nimport store from \"../store/store\";\r\nimport useDebounce from \"../helpers/useDebounce\";\r\n\r\nconst CitySearch = (props) => {\r\n    useEffect(() => {\r\n        if (localStorage.getItem('location') && props.location === '') {\r\n            store.dispatch(setCity(localStorage.getItem('location')));\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n            localStorage.setItem('location', props.location);\r\n    }, [props.responseLocation]);\r\n\r\n    const debouncedLocation = useDebounce(props.location.trim(), 700);\r\n\r\n    const memoLoadWeather = useCallback(fetchWeather(debouncedLocation), [debouncedLocation]);\r\n\r\n    useEffect(() => {\r\n        if (debouncedLocation) {\r\n            memoLoadWeather();\r\n        }\r\n    }, [debouncedLocation, memoLoadWeather]);\r\n\r\n    return (\r\n        <div className='search'>\r\n            <h1>Right now in</h1>\r\n            <AutosizeInput\r\n                type='text'\r\n                minWidth='70'\r\n                inputStyle={{fontSize: 35, fontWeight: 600, display: 'block'}}\r\n                value={props.location}\r\n                onChange={(e) => props.onChange(e)}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    location: state.weatherData.location,\r\n    responseLocation: state.weatherData.responseLocation,\r\n    favoriteCities: state.weatherData.favoriteCities,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    onChange: (event) => {\r\n        dispatch(setCity(event.target.value));\r\n    }\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CitySearch);\r\n","import React from 'react';\r\nimport {Button} from \"@mui/material\";\r\n\r\nconst OutlinedButton = ({children, ...props}) => {\r\n    return (\r\n        <Button {...props} variant=\"outlined\" fullWidth={true}>{children}</Button>\r\n    );\r\n};\r\n\r\nexport default OutlinedButton;","import React from 'react';\r\nimport OutlinedButton from \"./UI/OutlinedButton\";\r\n\r\nconst ForecastPageButtonLink = ({children, ...props}) => {\r\n    return (\r\n        <OutlinedButton {...props} sx={{\r\n            marginTop: '20px',\r\n            borderRadius: '40px',\r\n            boxShadow: '0px 1px 1px 0px #00000026'\r\n        }}>{children}</OutlinedButton>\r\n    );\r\n};\r\n\r\nexport default ForecastPageButtonLink;","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\n\r\nconst WeatherTempScale = (props) => {\r\n    if (props.tempScale === 'celsius') {\r\n        return (\r\n            <h1 className='celsius'>\r\n                {props.temp_c}\r\n            </h1>\r\n        )\r\n    } else {\r\n        return (\r\n            <h1 className='fahrenheit'>\r\n                {props.temp_f}\r\n            </h1>\r\n        )\r\n    }\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    tempScale: state.weatherData.tempScale,\r\n    temp_c: state.weatherData.temp_c,\r\n    temp_f: state.weatherData.temp_f\r\n})\r\n\r\nexport default connect(mapStateToProps)(WeatherTempScale);","import React from 'react';\r\nimport '../styles/CurrentForecast.css';\r\nimport {connect} from 'react-redux';\r\n\r\nconst WeatherCondition = (props) => {\r\n    return (\r\n        <div className='condition'>it's {props.condition}</div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    location: state.weatherData.location,\r\n    responseLocation: state.weatherData.responseLocation,\r\n    condition: state.weatherData.condition,\r\n})\r\n\r\nexport default connect(mapStateToProps)(WeatherCondition);\r\n\r\n","import React from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\nimport WeatherIcon from './WeatherIcon';\r\nimport '../styles/CurrentForecast.css';\r\nimport WeatherTempScale from \"./WeatherTempScale\";\r\nimport WeatherCondition from \"./WeatherCondition\";\r\n\r\nconst CurrentForecast = (props) => {\r\n    // Conversion from kph to m/s\r\n    const windToMPS = (props.wind * 1000 / 3600).toFixed(1);\r\n    // Conversion from millibars to millimeters of mercury according to the formula\r\n    const pressureToMmOfMercury = (props.pressure * 0.750063755419211).toFixed();\r\n\r\n    return (\r\n        <div>\r\n            <WeatherCondition/>\r\n            <div className='weather grid'>\r\n                <WeatherIcon className='weather__icon' color={{fill: '#fff'}} code={props.code} isDay={props.isDay}/>\r\n                <div className='weather__temp'>\r\n                    <WeatherTempScale className='weather__temp-scale'/>\r\n                </div>\r\n                <div className='flex weather__properties'>\r\n                    <div className='properties__value'>{windToMPS}<span>m/s</span></div>\r\n\r\n                    <div className='properties__value'>{pressureToMmOfMercury}<span>mm Hg</span></div>\r\n                    <div className='properties__value'>{props.humidity}<span>%</span></div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    location: state.weatherData.location,\r\n    responseLocation: state.weatherData.responseLocation,\r\n    wind: state.weatherData.wind,\r\n    pressure: state.weatherData.pressure,\r\n    humidity: state.weatherData.humidity,\r\n    code: state.weatherData.code,\r\n    isDay: state.weatherData.isDay\r\n});\r\n\r\nexport default connect(mapStateToProps)(CurrentForecast);\r\n","import React, {useEffect} from 'react';\r\nimport FavoriteCityButton from \"../components/FavoriteCityButton\";\r\nimport {Link, useHistory} from \"react-router-dom\";\r\nimport ListButton from \"../components/UI/ListButton\";\r\nimport CitySearch from \"../components/CitySearch\";\r\nimport {useParams} from 'react-router-dom';\r\nimport {connect} from \"react-redux\";\r\nimport ForecastPageButtonLink from \"../components/ForecastPageButtonLink\";\r\nimport CurrentForecast from \"../components/CurrentForecast\";\r\n\r\nconst CityPage = (props) => {\r\n    const params = useParams();\r\n    const router = useHistory();\r\n\r\n    // Redirect to the home page if you start looking for another city\r\n    useEffect(() => {\r\n        if (props.location !== params.city) {\r\n            router.push('/SimpleWeather');\r\n        }\r\n    }, [props.location])\r\n\r\n    return (\r\n        <div>\r\n            <div className='app'>\r\n                <FavoriteCityButton/>\r\n                <Link to='/SimpleWeather/cities' className='app__list-button'>\r\n                    <ListButton/>\r\n                </Link>\r\n                <CitySearch/>\r\n                <CurrentForecast/>\r\n                <Link to='/SimpleWeather/forecast'>\r\n                    <ForecastPageButtonLink>Show me the forecast</ForecastPageButtonLink>\r\n                </Link>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    location: state.weatherData.location\r\n})\r\n\r\nexport default connect(mapStateToProps)(CityPage);","import React from 'react';\r\nimport OutlinedButton from \"./UI/OutlinedButton\";\r\n\r\nconst ForecastPageBackButton = ({children, ...props}) => {\r\n    return (\r\n        <OutlinedButton {...props} sx={{\r\n            color: '#2d81ff',\r\n            borderColor: '#2d81ff',\r\n            borderRadius: '40px',\r\n            boxShadow: '0px 1px 1px 0px #00000026',\r\n            '&.MuiButton-root:hover': {\r\n                borderColor: '#08C8F6',\r\n                color: '#08C8F6',\r\n\r\n            }\r\n        }}>{children}</OutlinedButton>\r\n    );\r\n};\r\n\r\nexport default ForecastPageBackButton;","import React, {useRef, useState} from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport SwiperCore, {\r\n    Pagination\r\n} from 'swiper';\r\nimport {Swiper, SwiperSlide} from \"swiper/react/swiper-react\";\r\nimport 'swiper/swiper-bundle.css';\r\nimport 'swiper';\r\nimport '../styles/ForecastSwiper.css';\r\nimport moment from \"moment\";\r\nimport WeatherIcon from \"./WeatherIcon\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nconst ForecastSwiper = (props) => {\r\n    SwiperCore.use([Pagination]);\r\n    if (props.forecastMod === 'threeDay' && props.threeDayForecast.length) {\r\n        return (\r\n            <Swiper slidesPerView={3} pagination={{\"clickable\": true}}>\r\n                {props.threeDayForecast.map((day) =>\r\n                    <SwiperSlide className='swiper__item'>\r\n                        <h3 className='item__date'>\r\n                            {moment(day.date, 'YYYY-MM-DD').calendar({\r\n                                sameDay: '[Today]',\r\n                                nextDay: '[Tomorrow]',\r\n                                nextWeek: 'dddd',\r\n                            })}\r\n                        </h3>\r\n                        <WeatherIcon className='item__icon' code={day.code} isDay={day.isDay}\r\n                                     color={{fill: '#2D81FF'}}/>\r\n                        <p className='item__temp'>\r\n                            {props.tempScale === 'celsius' ? day.temp_c.toFixed() : day.temp_f.toFixed()}°\r\n                        </p>\r\n                    </SwiperSlide>\r\n                )}\r\n            </Swiper>\r\n        )\r\n    }\r\n    if (props.forecastMod === 'hourly' && props.threeDayForecast.length) {\r\n        const [currentHour, ...restHours] = props.hourlyForecast;\r\n        return (\r\n            <Swiper slidesPerView={4} pagination={{'clickable': true, 'dynamicBullets': true, 'dynamicMainBullets': 3}}>\r\n                <SwiperSlide className='swiper__item'>\r\n                    <h3 className='item__date'>Now</h3>\r\n                    <WeatherIcon className='item__icon' code={currentHour.code} isDay={currentHour.isDay}\r\n                                 color={{fill: '#2D81FF'}}/>\r\n                    <p className='item__temp'>\r\n                        {props.tempScale === 'celsius' ? currentHour.temp_c.toFixed() : currentHour.temp_f.toFixed()}°\r\n                    </p>\r\n                </SwiperSlide>\r\n                {restHours.map((hour) =>\r\n                    <SwiperSlide className={hour.isRain ? 'swiper__item' : 'swiper__item'}>\r\n                        <h3 className='item__date'>\r\n                            {moment(hour.hour, 'YYYY-MM-DD HH').format('HH:mm')}\r\n                        </h3>\r\n                        <WeatherIcon className='item__icon' code={hour.code} isDay={hour.isDay}\r\n                                     color={{fill: '#2D81FF'}}/>\r\n                        <p className='item__temp'>\r\n                            {props.tempScale === 'celsius' ? hour.temp_c.toFixed() : hour.temp_f.toFixed()}°\r\n                        </p>\r\n                    </SwiperSlide>\r\n                )}\r\n            </Swiper>\r\n        )\r\n    } else {\r\n        return (\r\n            <Redirect to='/SimpleWeather'/>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    forecastMod: state.weatherData.forecastMod,\r\n    threeDayForecast: state.weatherData.threeDayForecast,\r\n    hourlyForecast: state.weatherData.hourlyForecast,\r\n    tempScale: state.weatherData.tempScale,\r\n})\r\n\r\nexport default connect(mapStateToProps)(ForecastSwiper);","import React, {useState} from 'react';\r\nimport {ToggleButton, ToggleButtonGroup} from \"@mui/material\";\r\nimport {changeForecastMod} from \"../store/weatherReducer/weatherReducer\";\r\nimport {connect} from \"react-redux\";\r\nimport '../styles/ForecastToggle.css'\r\n\r\nconst ForecastToggle = (props) => {\r\n    if (!localStorage.getItem('forecastScale')) {\r\n        localStorage.setItem('forecastScale', 'threeDay');\r\n    }\r\n    const [value, setValue] = useState(localStorage.getItem('forecastScale'));\r\n    return (\r\n        <div className='forecast-toggle-wrapper'>\r\n            <ToggleButtonGroup\r\n                color='secondary'\r\n                value={value}\r\n                exclusive\r\n                sx={{\r\n                    '& .MuiToggleButton-root': {\r\n                        backgroundColor: 'transparent',\r\n                        borderColor: '#F9FBFF',\r\n                        color: '#2d81ff',\r\n                        textTransform: 'capitalize',\r\n                        '&.Mui-selected': {\r\n                            backgroundColor: '#6BA6FF',\r\n                            color: '#ffffff',\r\n                        },\r\n                        '&.Mui-selected:hover': {\r\n                            backgroundColor: '#5096ff',\r\n                            color: '#ffffff',\r\n                        }\r\n                    },\r\n                    height: '24px',\r\n                }}\r\n                fullWidth={true}\r\n                className='forecast-toggle'\r\n                onChange={() => {\r\n                    if (value === 'threeDay') {\r\n                        setValue('hourly')\r\n                        props.changeForecastMod('hourly');\r\n                        localStorage.setItem('forecastScale', 'hourly')\r\n                    } else {\r\n                        setValue('threeDay')\r\n                        props.changeForecastMod('threeDay')\r\n                        localStorage.setItem('forecastScale', 'threeDay')\r\n                    }\r\n                }}\r\n            >\r\n                <ToggleButton value='hourly' sx={{borderRadius: '20px 0 0 20px'}}>\r\n                    Hourly\r\n                </ToggleButton>\r\n                <ToggleButton value='threeDay' sx={{borderRadius: '0 20px 20px 0'}}>\r\n                    Three-day\r\n                </ToggleButton>\r\n            </ToggleButtonGroup>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    forecastMod: state.weatherData.forecastMod,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    changeForecastMod: (value) => {\r\n        dispatch(changeForecastMod(value));\r\n    },\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ForecastToggle);","import React from 'react';\r\nimport {Link} from \"react-router-dom\";\r\nimport ForecastPageBackButton from \"../components/ForecastPageBackButton\";\r\nimport ForecastSwiper from \"../components/ForecastSwiper\";\r\nimport ForecastToggle from \"../components/ForecastToggle\";\r\nimport {connect} from \"react-redux\";\r\n\r\nconst ForecastPage = (props) => {\r\n\r\n    return (\r\n        <div className='app app-outlined'>\r\n            <Link to='/SimpleWeather/'>\r\n                <ForecastPageBackButton>Back to home page</ForecastPageBackButton>\r\n            </Link>\r\n            <h1 style={{fontWeight: 'normal', fontSize: '30px', marginTop: '10px', paddingTop: '5px', borderTop: '1px solid #F9FBFF'}}>{props.location}</h1>\r\n            <h2 style={{fontWeight: 'normal', fontSize: '20px', marginTop: '5px'}}>{props.country}</h2>\r\n            <ForecastSwiper/>\r\n            <ForecastToggle/>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst MapStateToProps = (state) => ({\r\n    location: state.weatherData.responseLocation,\r\n    country: state.weatherData.country,\r\n})\r\nexport default connect(MapStateToProps)(ForecastPage);","import React from \"react\";\r\nimport CitySearch from \"../components/CitySearch\";\r\nimport FavoriteCityButton from \"../components/FavoriteCityButton\";\r\nimport ListButton from \"../components/UI/ListButton\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport ForecastPageButtonLink from \"../components/ForecastPageButtonLink\";\r\nimport CurrentForecast from \"../components/CurrentForecast\";\r\n\r\nconst SearchPage = (props) => {\r\n    if (props.responseLocation && props.location === props.responseLocation.toLowerCase()) {\r\n        return (\r\n            <div>\r\n                <div className='app'>\r\n                    <FavoriteCityButton/>\r\n                    <Link to='/SimpleWeather/cities' className='app__list-button'>\r\n                        <ListButton/>\r\n                    </Link>\r\n                    <CitySearch/>\r\n                    <CurrentForecast/>\r\n                    <Link to='/SimpleWeather/forecast'>\r\n                        <ForecastPageButtonLink>Show me the forecast</ForecastPageButtonLink>\r\n                    </Link>\r\n                </div>\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div>\r\n                <div className='app'>\r\n                    <FavoriteCityButton/>\r\n                    <Link to='/SimpleWeather/cities' className='app__list-button'>\r\n                        <ListButton/>\r\n                    </Link>\r\n                    <CitySearch/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    location: state.weatherData.location,\r\n    responseLocation: state.weatherData.responseLocation,\r\n})\r\n\r\nexport default connect(mapStateToProps)(SearchPage);\r\n","import React from 'react';\r\nimport {history} from './historyVar';\r\nimport {Redirect, Route, Router, Switch} from 'react-router-dom';\r\nimport CitiesPage from \"./pages/CitiesPage\";\r\nimport CityPage from \"./pages/CityPage\";\r\nimport ForecastPage from \"./pages/ForecastPage\";\r\nimport SearchPage from \"./pages/SearchPage\";\r\n\r\n\r\nconst App = () => {\r\n    return (\r\n        <Router history={history}>\r\n            <Switch>\r\n                <Route exact path='/SimpleWeather'>\r\n                    <SearchPage/>\r\n                </Route>\r\n                <Route exact path='/SimpleWeather/cities'>\r\n                    <CitiesPage/>\r\n                </Route>\r\n                <Route exact path='/SimpleWeather/cities/:city'>\r\n                    <CityPage/>\r\n                </Route>\r\n                <Route exact path='/SimpleWeather/forecast'>\r\n                    <ForecastPage/>\r\n                </Route>\r\n                <Redirect to='/SimpleWeather'/>\r\n            </Switch>\r\n        </Router>\r\n    );\r\n};\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {Provider} from 'react-redux'\r\nimport store from './store/store'\r\nimport App from './App';\r\nimport './index.css';\r\nimport './styles/adaptiveApp.css'\r\nimport {getCitiesFromLocaleStorage} from \"./store/favoriteCitiesReducer/favoriteCitiesReducer\";\r\nimport {createTheme} from \"@mui/material\";\r\nimport {ThemeProvider} from \"@emotion/react\";\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport {changeForecastMod, changeTempScale} from \"./store/weatherReducer/weatherReducer\";\r\n\r\nif (!localStorage.getItem('cities')) {\r\n    localStorage.setItem('cities', '[]');\r\n} else {\r\n    const citiesStr = localStorage.getItem('cities')\r\n    const cities = JSON.parse(citiesStr);\r\n    store.dispatch(getCitiesFromLocaleStorage(cities));\r\n}\r\n\r\nif (localStorage.getItem('tempScale')) {\r\n    store.dispatch(changeTempScale(localStorage.getItem('tempScale')))\r\n}\r\n\r\nif(localStorage.getItem('forecastScale')) {\r\n    store.dispatch(changeForecastMod(localStorage.getItem('forecastScale')))\r\n}\r\n\r\nconst theme = createTheme({\r\n    palette: {\r\n        primary: {\r\n            main: '#ffffff',\r\n            darker: '#ffffff'\r\n        },\r\n        secondary: {\r\n            main: '#2d81ff',\r\n            darker: '#2d81ff'\r\n        }\r\n    }\r\n});\r\n\r\n\r\nconst rootElement = document.getElementById('root')\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <ThemeProvider theme={theme}>\r\n            <BrowserRouter basename='/SimpleWeather'>\r\n                <App/>\r\n            </BrowserRouter>\r\n        </ThemeProvider>\r\n    </Provider>,\r\n    rootElement\r\n)\r\n"],"sourceRoot":""}