{"version":3,"sources":["store/weatherReducer/actionTypes.js","helpers/fetchData.js","store/weatherReducer/weatherReducer.js","store/favoriteCitiesReducer/actionTypes.js","store/favoriteCitiesReducer/favoriteCitiesReducer.js","store/store.js","helpers/useDebounce.js","components/CitySearch.js","components/UI/FavoriteButton.js","components/FavoriteCityButton.js","components/UI/ListButton.js","components/UI/OutlinedButton.js","components/ForecastPageButtonLink.js","components/WeatherIcon.js","components/WeatherTempScale.js","components/WeatherCondition.js","components/CurrentForecast.js","pages/WeatherToday.js","historyVar.js","components/UI/IconBackButton.js","components/CitiesPageBackButton.js","components/UI/MyButton.js","components/CityPageButtonLink.js","components/CitiesList.js","components/TempScaleToggle.js","pages/CitiesPage.js","pages/CityPage.js","components/ForecastPageBackButton.js","components/ForecastDay.js","components/ForecastToggle.js","pages/ForecastPage.js","App.js","index.js"],"names":["SET_CITY","SET_WEATHER","CHANGE_TEMP_SCALE","CHANGE_FORECAST_MODE","fetchData","location","days","a","fetch","response","json","data","console","error","setCity","city","type","payload","setWeather","changeTempScale","initialState","responseLocation","country","temp_c","temp_f","condition","wind","pressure","humidity","code","isDay","tempScale","hourlyForecast","threeDayForecast","forecastMod","ADD_TO_FAVORITES","REMOVE_FROM_FAVORITES","GET_CITIES","UPDATE_TEMP","updateTemp","citiesState","arrOfCities","addToFavorites","dispatch","store","addCity","removeFromFavorites","removeCity","composedEnhancer","composeWithDevTools","applyMiddleware","thunkMiddleware","rootReducer","combineReducers","cities","state","action","lastUpdated","filter","obj","map","name","toLowerCase","current","toFixed","Date","now","weatherData","text","wind_kph","pressure_mb","is_day","forecast","forecastday","hour","day","date","date_epoch","avgtemp_c","avgtemp_f","createStore","useDebounce","value","delay","useState","debouncedValue","setDebouncedValue","useEffect","handler","setTimeout","clearTimeout","connect","favoriteCities","onChange","event","target","props","localStorage","getItem","setItem","debouncedLocation","trim","memoLoadWeather","useCallback","fetchWeather","className","minWidth","inputStyle","fontSize","fontWeight","display","e","FavoriteButton","Checkbox","icon","FavoriteBorder","checkedIcon","Favorite","size","sx","color","objOfCity","find","isFavorite","setFavorite","isDisabled","setDisabled","JSON","stringify","onClick","disabled","checked","ListButton","IconButton","OutlinedButton","children","Button","variant","fullWidth","ForecastPageButtonLink","marginTop","borderRadius","boxShadow","timeOfDay","weatherSrc","process","windToMPS","pressureToMmOfMercury","to","history","createBrowserHistory","IconBackButton","CitiesPageBackButton","backgroundColor","MyButton","CityPageButtonLink","padding","cursor","justifyContent","alignItems","textTransform","width","height","border","flexShrink","borderColor","updateCityInStore","router","useHistory","length","push","setValue","ToggleButtonGroup","exclusive","ToggleButton","fetchCityTemp","currentDate","forEach","params","useParams","ForecastPageBackButton","threeDay","hourly","labels","datasets","label","tension","pointRadius","fill","above","below","moment","format","options","chart","default","scales","y","beginAtZero","grid","drawBorder","ticks","callback","index","values","title","font","x","plugins","legend","family","changeForecastMod","ForecastPage","App","exact","path","citiesStr","parse","theme","createTheme","palette","primary","main","darker","secondary","rootElement","document","getElementById","ReactDOM","render","basename"],"mappings":"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","file":"static/js/main.d40d8af3.chunk.js","sourcesContent":["export const SET_CITY = 'SET_CITY';\r\nexport const SET_WEATHER = 'SET_WEATHER';\r\nexport const CHANGE_TEMP_SCALE = 'CHANGE_TEMP_SCALE';\r\nexport const SET_FORECAST = 'SET_FORECAST';\r\nexport const CHANGE_FORECAST_MODE = 'CHANGE_FORECAST_MODE';","const fetchData = async (location, days) => {\r\n    try {\r\n        const response = await fetch(`https://api.weatherapi.com/v1/forecast.json?key=bec0a55c5686475981d152146211810&q=${location}&days=${days}&aqi=no&alerts=no`);\r\n        const data = await response.json();\r\n        return data;\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nexport default fetchData;","import store from \"../store\";\r\nimport {CHANGE_FORECAST_MODE, CHANGE_TEMP_SCALE, SET_CITY, SET_FORECAST, SET_WEATHER} from \"./actionTypes\";\r\nimport fetchData from \"../../helpers/fetchData\";\r\n\r\nexport const setCity = (city) => ({type: SET_CITY, payload: city})\r\nexport const setWeather = (response) => ({type: SET_WEATHER, payload: response})\r\nexport const changeTempScale = (response) => ({type: CHANGE_TEMP_SCALE, payload: response})\r\nexport const setForecast = (response) => ({type: SET_FORECAST, payload: response})\r\nexport const changeForecastMod = (response) => ({type: CHANGE_FORECAST_MODE, payload: response})\r\n\r\n\r\nexport const initialState = {\r\n    location: '',\r\n    responseLocation: '',\r\n    country: '',\r\n    temp_c: '',\r\n    temp_f: '',\r\n    condition: '',\r\n    wind: '',\r\n    pressure: '',\r\n    humidity: '',\r\n    code: '',\r\n    isDay: '',\r\n    tempScale: 'celsius',\r\n    hourlyForecast: [],\r\n    threeDayForecast: [],\r\n    forecastMod: 'threeDay'\r\n};\r\n\r\nexport function weatherReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case SET_CITY:\r\n            return {...state, location: action.payload.toLowerCase()};\r\n        case SET_WEATHER:\r\n            return {\r\n                ...state,\r\n                responseLocation: action.payload.location.name,\r\n                country: action.payload.location.country,\r\n                temp_c: action.payload.current.temp_c.toFixed(),\r\n                temp_f: action.payload.current.temp_f.toFixed(),\r\n                condition: action.payload.current.condition.text.toLowerCase(),\r\n                wind: action.payload.current.wind_kph,\r\n                pressure: action.payload.current.pressure_mb,\r\n                humidity: action.payload.current.humidity,\r\n                code: action.payload.current.condition.code,\r\n                isDay: action.payload.current.is_day,\r\n                hourlyForecast: action.payload.forecast.forecastday[0].hour.map((hour) => {\r\n                    return {temp_c: hour.temp_c, temp_f: hour.temp_f};\r\n                }),\r\n                threeDayForecast: action.payload.forecast.forecastday.map((day) => {\r\n                    return {date: day.date_epoch, temp_c: day.day.avgtemp_c, temp_f: day.day.avgtemp_f}\r\n                })\r\n            };\r\n        case CHANGE_TEMP_SCALE:\r\n            return {\r\n                ...state,\r\n                tempScale: action.payload\r\n            };\r\n        case CHANGE_FORECAST_MODE:\r\n            return  {\r\n                ...state,\r\n                forecastMod: action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// This API on the free plan provides a maximum of a three-day forecast\r\nexport const fetchWeather = (debouncedLocation, days = 3) => async (dispatch) => {\r\n    try {\r\n        const data = await (fetchData(debouncedLocation, days));\r\n        store.dispatch(setWeather(data));\r\n        localStorage.setItem('location', data.location.name);\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n}","export const ADD_TO_FAVORITES = \"ADD_TO_FAVORITES\";\r\nexport const REMOVE_FROM_FAVORITES = \"REMOVE_FROM_FAVORITES\";\r\nexport const GET_CITIES = \"GET_CITIES\";\r\nexport const UPDATE_TEMP = \"UPDATE_TEMP\";","import store from \"../store\";\r\nimport {ADD_TO_FAVORITES, GET_CITIES, REMOVE_FROM_FAVORITES, UPDATE_TEMP} from \"./actionTypes\";\r\nimport fetchData from \"../../helpers/fetchData\";\r\n\r\nexport const addCity = (city) => ({type: ADD_TO_FAVORITES, payload: city})\r\nexport const removeCity = (city) => ({type: REMOVE_FROM_FAVORITES, payload: city})\r\nexport const getCitiesFromLocaleStorage = (cities) => ({type: GET_CITIES, payload: cities})\r\nexport const updateTemp = (data) => ({type: UPDATE_TEMP, payload: data})\r\n\r\nexport const citiesState = {\r\n    arrOfCities: [],\r\n};\r\n\r\nexport function favoriteCitiesReducer(state = citiesState, action) {\r\n    switch (action.type) {\r\n        case ADD_TO_FAVORITES:\r\n            return {\r\n                ...state,\r\n                arrOfCities: [...state.arrOfCities, {\r\n                    city: action.payload.city,\r\n                    temp_c: action.payload.temp_c,\r\n                    temp_f: action.payload.temp_f,\r\n                    lastUpdated: action.payload.lastUpdated,\r\n                }]\r\n            };\r\n        case REMOVE_FROM_FAVORITES:\r\n            return {\r\n                ...state,\r\n                arrOfCities: state.arrOfCities.filter(\r\n                    (obj) => obj.city !== action.payload\r\n                ),\r\n            };\r\n        case GET_CITIES:\r\n            return {\r\n                ...state,\r\n                arrOfCities: action.payload,\r\n            };\r\n        case UPDATE_TEMP:\r\n            return {\r\n                ...state,\r\n                arrOfCities: state.arrOfCities.map((obj) => obj.city === action.payload.location.name.toLowerCase() ? {\r\n                    ...obj, temp_c: action.payload.current.temp_c.toFixed(),\r\n                    temp_f: action.payload.current.temp_f.toFixed(),\r\n                    lastUpdated: Date.now(),\r\n                } : obj)\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const addToFavorites = (city) => (dispatch) => {\r\n    store.dispatch(addCity(city));\r\n};\r\nexport const removeFromFavorites = (city) => (dispatch) => {\r\n    store.dispatch(removeCity(city));\r\n};\r\n\r\nexport const fetchCityTemp = (city) => async (dispatch) => {\r\n    try {\r\n        const data = await (fetchData(city));\r\n        store.dispatch(updateTemp(data));\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n}","import {createStore, combineReducers, applyMiddleware} from 'redux';\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {composeWithDevTools} from 'redux-devtools-extension';\r\nimport {weatherReducer} from \"./weatherReducer/weatherReducer\";\r\nimport {favoriteCitiesReducer} from \"./favoriteCitiesReducer/favoriteCitiesReducer\";\r\n\r\nconst composedEnhancer = composeWithDevTools(applyMiddleware(thunkMiddleware))\r\n\r\nconst rootReducer = combineReducers({\r\n    cities: favoriteCitiesReducer,\r\n    weatherData: weatherReducer\r\n})\r\n\r\nlet store = createStore(rootReducer, composedEnhancer);\r\nexport default store;","import {useEffect, useState} from 'react';\r\n\r\nfunction useDebounce(value, delay) {\r\n    const [debouncedValue, setDebouncedValue] = useState(value);\r\n\r\n    useEffect(\r\n        () => {\r\n            const handler = setTimeout(() => setDebouncedValue(value), delay);\r\n            return () => clearTimeout(handler);\r\n        }, [delay, value],\r\n    );\r\n\r\n    return debouncedValue;\r\n}\r\n\r\nexport default useDebounce;","import React, {useCallback, useEffect} from \"react\";\r\nimport AutosizeInput from \"react-input-autosize\";\r\nimport {connect} from \"react-redux\";\r\nimport \"../styles/CitySearch.css\";\r\nimport {fetchWeather, setCity} from \"../store/weatherReducer/weatherReducer\";\r\nimport store from \"../store/store\";\r\nimport useDebounce from \"../helpers/useDebounce\";\r\n\r\nconst CitySearch = (props) => {\r\n    useEffect(() => {\r\n        if (localStorage.getItem('location') && props.location === '') {\r\n            store.dispatch(setCity(localStorage.getItem('location')));\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            localStorage.setItem('location', props.location);\r\n        };\r\n    }, []);\r\n\r\n    const debouncedLocation = useDebounce(props.location.trim(), 700);\r\n\r\n    const memoLoadWeather = useCallback(fetchWeather(debouncedLocation), [debouncedLocation]);\r\n\r\n    useEffect(() => {\r\n        if (debouncedLocation) {\r\n            memoLoadWeather();\r\n        }\r\n    }, [debouncedLocation, memoLoadWeather]);\r\n\r\n    return (\r\n        <div className='search'>\r\n            <h1>Right now in</h1>\r\n            <AutosizeInput\r\n                type='text'\r\n                minWidth='70'\r\n                inputStyle={{fontSize: 35, fontWeight: 600, display: 'block'}}\r\n                value={props.location}\r\n                onChange={(e) => props.onChange(e)}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    location: state.weatherData.location,\r\n    favoriteCities: state.weatherData.favoriteCities\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    onChange: (event) => {\r\n        dispatch(setCity(event.target.value));\r\n    }\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CitySearch);\r\n","import React from \"react\";\r\nimport {Favorite, FavoriteBorder} from \"@mui/icons-material\";\r\nimport {Checkbox} from \"@mui/material\";\r\n\r\nconst FavoriteButton = (props) => {\r\n    return (\r\n        <Checkbox\r\n            {...props}\r\n            icon={<FavoriteBorder/>}\r\n            checkedIcon={<Favorite/>}\r\n            size='large'\r\n            sx={{\r\n                color: 'white',\r\n                '&.Mui-checked': {\r\n                    color: 'white',\r\n                },\r\n                '&.Mui-disabled': {\r\n                    color: 'transparent',\r\n                }\r\n            }}\r\n        />\r\n    );\r\n};\r\nexport default FavoriteButton;\r\n","import React, {useEffect, useState} from \"react\";\r\nimport FavoriteButton from \"./UI/FavoriteButton\";\r\nimport {connect} from \"react-redux\";\r\nimport {addToFavorites, removeFromFavorites} from \"../store/favoriteCitiesReducer/favoriteCitiesReducer\";\r\n\r\nconst FavoriteCityButton = (props) => {\r\n    const [isFavorite, setFavorite] = useState(props.cities.find(obj => obj.city === props.location))\r\n    const [isDisabled, setDisabled] = useState(false);\r\n\r\n    useEffect(() => {\r\n        setFavorite(props.cities.find(obj => obj.city === props.location));\r\n    }, [props.location]);\r\n\r\n    useEffect(() => {\r\n        if (\r\n            props.location &&\r\n            props.location === props.responseLocation.toLowerCase()\r\n        ) {\r\n            setDisabled(false);\r\n        } else {\r\n            setDisabled(true);\r\n        }\r\n    }, [props.location, props.responseLocation]);\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem('cities', JSON.stringify(props.cities));\r\n    }, [props.cities]);\r\n\r\n    return (\r\n        <FavoriteButton\r\n            onClick={() => {\r\n                if (!isFavorite) {\r\n                    props.addToFavorites({\r\n                        city: props.location,\r\n                        temp_c: props.temp_c,\r\n                        temp_f: props.temp_f,\r\n                        lastUpdated: Date.now()\r\n                    });\r\n                    setFavorite(!isFavorite);\r\n                } else {\r\n                    props.removeFromFavorites(props.location);\r\n                    setFavorite(!isFavorite);\r\n                }\r\n            }}\r\n            disabled={isDisabled}\r\n            checked={!!isFavorite}\r\n        />\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    location: state.weatherData.location,\r\n    responseLocation: state.weatherData.responseLocation,\r\n    temp_c: state.weatherData.temp_c,\r\n    temp_f: state.weatherData.temp_f,\r\n    cities: state.cities.arrOfCities,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    addToFavorites: (objOfCity) => {\r\n        dispatch(addToFavorites(objOfCity));\r\n    },\r\n    removeFromFavorites: (city) => {\r\n        dispatch(removeFromFavorites(city));\r\n    },\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FavoriteCityButton);\r\n","import React from \"react\";\r\nimport {IconButton} from \"@mui/material\";\r\nimport FormatListBulletedIcon from '@mui/icons-material/FormatListBulleted';\r\n\r\nconst ListButton = () => {\r\n    return (\r\n        <IconButton size='large' sx={{color: 'white'}}>\r\n            <FormatListBulletedIcon fontSize='large'/>\r\n        </IconButton>\r\n    );\r\n};\r\n\r\nexport default ListButton;\r\n","import React from 'react';\r\nimport {Button} from \"@mui/material\";\r\n\r\nconst OutlinedButton = ({children, ...props}) => {\r\n    return (\r\n        <Button {...props} variant=\"outlined\" fullWidth={true}>{children}</Button>\r\n    );\r\n};\r\n\r\nexport default OutlinedButton;","import React from 'react';\r\nimport OutlinedButton from \"./UI/OutlinedButton\";\r\n\r\nconst ForecastPageButtonLink = ({children, ...props}) => {\r\n    return (\r\n        <OutlinedButton {...props} sx={{\r\n            marginTop: '20px',\r\n            borderRadius: '40px',\r\n            boxShadow: '0px 1px 1px 0px #00000026'\r\n        }}>{children}</OutlinedButton>\r\n    );\r\n};\r\n\r\nexport default ForecastPageButtonLink;","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport \"../styles/CurrentForecast.css\";\r\n\r\nconst WeatherIcon = (props) => {\r\n    let timeOfDay = 'day';\r\n    if (!props.isDay) {\r\n        timeOfDay = 'night';\r\n    }\r\n\r\n    const weatherSrc = `${process.env.PUBLIC_URL}/assets/icons/${timeOfDay}/${props.code}.svg`;\r\n\r\n    return (\r\n        <div className='weather__icon'>\r\n            <object data={weatherSrc} className='weather__icon' type='image/svg+xml'\r\n                    aria-label='icon of weather'/>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    code: state.weatherData.code,\r\n    isDay: state.weatherData.isDay\r\n})\r\nexport default connect(mapStateToProps)(WeatherIcon);","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\n\r\nconst WeatherTempScale = (props) => {\r\n    if (props.tempScale === 'celsius') {\r\n        return (\r\n            <h1 className='celsius'>\r\n                {props.temp_c}\r\n            </h1>\r\n        )\r\n    } else {\r\n        return (\r\n            <h1 className='fahrenheit'>\r\n                {props.temp_f}\r\n            </h1>\r\n        )\r\n    }\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    tempScale: state.weatherData.tempScale,\r\n    temp_c: state.weatherData.temp_c,\r\n    temp_f: state.weatherData.temp_f\r\n})\r\n\r\nexport default connect(mapStateToProps)(WeatherTempScale);","import React from 'react';\r\nimport '../styles/CurrentForecast.css';\r\nimport {connect} from 'react-redux';\r\n\r\nconst WeatherCondition = (props) => {\r\n    return (\r\n        <div className='condition'>it's {props.condition}</div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    location: state.weatherData.location,\r\n    responseLocation: state.weatherData.responseLocation,\r\n    condition: state.weatherData.condition,\r\n})\r\n\r\nexport default connect(mapStateToProps)(WeatherCondition);\r\n\r\n","import React from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\nimport WeatherIcon from './WeatherIcon';\r\nimport '../styles/CurrentForecast.css';\r\nimport WeatherTempScale from \"./WeatherTempScale\";\r\nimport WeatherCondition from \"./WeatherCondition\";\r\n\r\nconst CurrentForecast = (props) => {\r\n    // Conversion from kph to m/s\r\n    const windToMPS = (props.wind * 1000 / 3600).toFixed(1);\r\n    // Conversion from millibars to millimeters of mercury according to the formula\r\n    const pressureToMmOfMercury = (props.pressure * 0.750063755419211).toFixed();\r\n\r\n    return (\r\n        <div>\r\n            <WeatherCondition/>\r\n            <div className='weather grid'>\r\n                <WeatherIcon/>\r\n                <div className='weather__temp'>\r\n                    <WeatherTempScale className='weather__temp-scale'/>\r\n                </div>\r\n                <div className='flex weather__properties'>\r\n                    <div className='properties__value'>{windToMPS}<span>m/s</span></div>\r\n\r\n                    <div className='properties__value'>{pressureToMmOfMercury}<span>mm Hg</span></div>\r\n                    <div className='properties__value'>{props.humidity}<span>%</span></div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    location: state.weatherData.location,\r\n    responseLocation: state.weatherData.responseLocation,\r\n    wind: state.weatherData.wind,\r\n    pressure: state.weatherData.pressure,\r\n    humidity: state.weatherData.humidity,\r\n});\r\n\r\nexport default connect(mapStateToProps)(CurrentForecast);\r\n","import React from \"react\";\r\nimport CitySearch from \"../components/CitySearch\";\r\nimport FavoriteCityButton from \"../components/FavoriteCityButton\";\r\nimport ListButton from \"../components/UI/ListButton\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport ForecastPageButtonLink from \"../components/ForecastPageButtonLink\";\r\nimport CurrentForecast from \"../components/CurrentForecast\";\r\n\r\nconst WeatherToday = (props) => {\r\n    if (props.responseLocation && props.location === props.responseLocation.toLowerCase()) {\r\n        return (\r\n            <div>\r\n                <div className='app'>\r\n                    <FavoriteCityButton/>\r\n                    <Link to='/SimpleWeather/cities' className='app__list-button'>\r\n                        <ListButton/>\r\n                    </Link>\r\n                    <CitySearch/>\r\n                    <CurrentForecast/>\r\n                    <Link to='/SimpleWeather/forecast'>\r\n                        <ForecastPageButtonLink>Show me the forecast</ForecastPageButtonLink>\r\n                    </Link>\r\n                </div>\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div>\r\n                <div className='app'>\r\n                    <FavoriteCityButton/>\r\n                    <Link to='/SimpleWeather/cities' className='app__list-button'>\r\n                        <ListButton/>\r\n                    </Link>\r\n                    <CitySearch/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    location: state.weatherData.location,\r\n    responseLocation: state.weatherData.responseLocation,\r\n})\r\n\r\nexport default connect(mapStateToProps)(WeatherToday);\r\n","import {createBrowserHistory} from 'history';\r\n\r\nexport const history = createBrowserHistory();\r\n","import React from 'react';\r\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\r\nimport {IconButton} from \"@mui/material\";\r\n\r\nconst IconBackButton = (props) => {\r\n    return (\r\n        <IconButton size='large' {...props}>\r\n            <ArrowBackIcon fontSize='large'/>\r\n        </IconButton>\r\n    );\r\n};\r\n\r\nexport default IconBackButton;","import React from \"react\";\r\nimport IconBackButton from \"./UI/IconBackButton\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nconst CitiesPageBackButton = () => {\r\n    return (\r\n        <Link to='/SimpleWeather' className='cities-page__back-btn'>\r\n            <IconBackButton\r\n                sx={{color: '#2D81FF', '&.MuiIconButton-root:hover': {backgroundColor: 'rgba(45, 129, 255, 0.02)'}}}/>\r\n        </Link>\r\n    );\r\n};\r\n\r\nexport default CitiesPageBackButton;\r\n","import React from 'react';\r\nimport {Button} from \"@mui/material\";\r\n\r\nconst MyButton = ({children, ...props}) => {\r\n    return (\r\n        <Button {...props}>\r\n            {children}\r\n        </Button>\r\n    );\r\n};\r\n\r\nexport default MyButton;","import React from 'react';\r\nimport MyButton from \"./UI/MyButton\";\r\n\r\nconst CityPageButtonLink = ({children, ...props}) => {\r\n    return (\r\n        <MyButton {...props} sx={{\r\n            padding: '0 21px',\r\n            backgroundColor: 'transparent',\r\n            cursor: 'pointer',\r\n            display: 'flex',\r\n            justifyContent: 'space-between',\r\n            alignItems: 'center',\r\n            fontSize: '20px',\r\n            textTransform: 'capitalize',\r\n            width: '291px',\r\n            height: '60px',\r\n            color: '#2d81ff',\r\n            border: '1px solid #5f9fff',\r\n            boxShadow: '0 4px 4px 0 #00000026',\r\n            borderRadius: '20px',\r\n            flexShrink: '0',\r\n            '&.MuiButton-root:hover': {\r\n            borderColor: '#08C8F6',\r\n            color: '#08C8F6'\r\n        }\r\n        }}>\r\n            {children}\r\n        </MyButton>\r\n    );\r\n};\r\n\r\nexport default CityPageButtonLink;","import React from \"react\";\nimport {connect} from \"react-redux\";\nimport \"../styles/CitiesList.css\";\nimport {useHistory} from \"react-router-dom\";\nimport {setCity} from \"../store/weatherReducer/weatherReducer\";\nimport CityPageButtonLink from \"./CityPageButtonLink\";\n\nconst CitiesList = (props) => {\n    const router = useHistory();\n    if (props.cities.length > 0) {\n        return (\n            <div className='flex cities-list'>\n                <div className='blue-line'></div>\n                <div className='cities'>\n                    {props.cities.map((obj) => (\n                        <CityPageButtonLink\n                            onClick={() => {\n                                router.push(`/SimpleWeather/cities/${obj.city}`);\n                                props.updateCityInStore(obj.city);\n                            }}\n                            className='cities__btn'\n                            key={obj.city}\n                        >\n                            <div>{obj.city}</div>\n                            <div>{props.tempScale === \"celsius\" ? obj.temp_c : obj.temp_f}°</div>\n                        </CityPageButtonLink>\n                    ))}\n                </div>\n            </div>\n        );\n    } else {\n        return (\n            <div className='flex cities-list'>\n                <div className='blue-line'></div>\n                <div className='cities-empty'>\n                    <p>Oops!</p>\n                    <p>You haven't added any city yet!</p>\n                </div>\n                <div className='blue-line'></div>\n            </div>\n        );\n    }\n};\n\nconst mapStateToProps = (state) => ({\n    cities: state.cities.arrOfCities,\n    tempScale: state.weatherData.tempScale,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n    updateCityInStore: (city) => {\n        dispatch(setCity(city));\n    }\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CitiesList);\n","import React, {useState} from \"react\";\nimport {ToggleButton, ToggleButtonGroup} from \"@mui/material\";\nimport {connect} from \"react-redux\";\nimport {changeTempScale} from \"../store/weatherReducer/weatherReducer\";\n\nconst TempScaleToggle = (props) => {\n    if (!localStorage.getItem('tempScale')) {\n        localStorage.setItem('tempScale', 'celsius');\n    }\n    const [value, setValue] = useState(localStorage.getItem('tempScale'));\n    return (\n            <ToggleButtonGroup\n                color='secondary'\n                value={value}\n                exclusive\n                fullWidth={true}\n                sx={{height: '20px'}}\n                onChange={() => {\n                    if (value === 'celsius') {\n                        setValue('fahrenheit')\n                        props.changeTempScale('fahrenheit');\n                        localStorage.setItem('tempScale', 'fahrenheit')\n                    } else {\n                        setValue('celsius')\n                        props.changeTempScale('celsius')\n                        localStorage.setItem('tempScale', 'celsius')\n                    }\n                }}\n            >\n                <ToggleButton\n                    value='fahrenheit'\n                    sx={{\n                        '&.MuiToggleButton-root': {\n                            borderRadius: '20px',\n                            backgroundColor: 'transparent',\n                            borderColor: '#F9FBFF',\n                            color: '#2d81ff',\n                            textTransform: 'capitalize',\n                        },\n                        '&.Mui-selected': {\n                            backgroundColor: '#6BA6FF',\n                            borderColor: '#6BA6FF',\n                            color: '#ffffff',\n                        },\n                        '&.Mui-selected:hover': {\n                            backgroundColor: '#5096ff',\n                            color: '#ffffff',\n                        },\n                    }}\n                >\n                    Fahrenheit\n                </ToggleButton>\n                <ToggleButton\n                    value='celsius'\n                    sx={{\n                        '&.MuiToggleButton-root': {\n                            borderRadius: '20px',\n                            backgroundColor: 'transparent',\n                            borderColor: '#F9FBFF',\n                            color: '#2d81ff',\n                            textTransform: 'capitalize',\n                        },\n                        '&.Mui-selected': {\n                            backgroundColor: '#6BA6FF',\n                            borderColor: '#6BA6FF',\n                            color: '#ffffff',\n                        },\n                        '&.Mui-selected:hover': {\n                            backgroundColor: '#5096ff',\n                            color: '#ffffff',\n                        },\n                    }}\n                >\n                    Celsius\n                </ToggleButton>\n            </ToggleButtonGroup>\n    );\n};\n\nconst mapStateToProps = (state) => ({\n    tempScale: state.weatherData.tempScale,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n    changeTempScale: (value) => {\n        dispatch(changeTempScale(value));\n    },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TempScaleToggle);\n","import React, {useEffect} from \"react\";\r\nimport \"../styles/CitiesPage.css\";\r\nimport CitiesPageBackButton from \"../components/CitiesPageBackButton\";\r\nimport CitiesList from \"../components/CitiesList\";\r\nimport TempScaleToggle from \"../components/TempScaleToggle\";\r\nimport {connect} from \"react-redux\";\r\nimport {fetchCityTemp} from \"../store/favoriteCitiesReducer/favoriteCitiesReducer\";\r\n\r\nconst CitiesPage = (props) => {\r\n    const fifteenMinutes = 90000;\r\n    const currentDate = Date.now();\r\n\r\n    useEffect(() => {\r\n        props.cities.forEach((obj) => {\r\n            if(currentDate - obj.lastUpdated > fifteenMinutes) {\r\n                props.fetchCityTemp(obj.city)\r\n            }\r\n            localStorage.setItem('cities', JSON.stringify(props.cities));\r\n        })\r\n    }, [])\r\n\r\n    return (\r\n        <div className='app app-outlined cities-page'>\r\n            <CitiesPageBackButton/>\r\n            <div className='cities-page__list'>\r\n                <h1 className='cities-page-header'>Favorite cities</h1>\r\n                <CitiesList/>\r\n            </div>\r\n            <div className='cities-page__settings'>\r\n                <h1 className='cities-page-header'>Settings</h1>\r\n                <TempScaleToggle/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    cities: state.cities.arrOfCities\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    fetchCityTemp: (city) => {\r\n        dispatch(fetchCityTemp(city));\r\n    }\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CitiesPage);\r\n","import React, {useEffect} from 'react';\r\nimport FavoriteCityButton from \"../components/FavoriteCityButton\";\r\nimport {Link, useHistory} from \"react-router-dom\";\r\nimport ListButton from \"../components/UI/ListButton\";\r\nimport CitySearch from \"../components/CitySearch\";\r\nimport {useParams} from 'react-router-dom';\r\nimport {connect} from \"react-redux\";\r\nimport ForecastPageButtonLink from \"../components/ForecastPageButtonLink\";\r\nimport CurrentForecast from \"../components/CurrentForecast\";\r\n\r\nconst CityPage = (props) => {\r\n    const params = useParams();\r\n    const router = useHistory();\r\n\r\n    // Redirect to the home page if you start looking for another city\r\n    useEffect(() => {\r\n        if (props.location !== params.city) {\r\n            router.push('/SimpleWeather');\r\n        }\r\n    }, [props.location])\r\n\r\n    return (\r\n        <div>\r\n            <div className='app'>\r\n                <FavoriteCityButton/>\r\n                <Link to='/SimpleWeather/cities' className='app__list-button'>\r\n                    <ListButton/>\r\n                </Link>\r\n                <CitySearch/>\r\n                <CurrentForecast/>\r\n                <Link to='/SimpleWeather/forecast'>\r\n                    <ForecastPageButtonLink>Show me the forecast</ForecastPageButtonLink>\r\n                </Link>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    location: state.weatherData.location\r\n})\r\n\r\nexport default connect(mapStateToProps)(CityPage);","import React from 'react';\r\nimport OutlinedButton from \"./UI/OutlinedButton\";\r\n\r\nconst ForecastPageBackButton = ({children, ...props}) => {\r\n    return (\r\n        <OutlinedButton {...props} sx={{\r\n            color: '#2d81ff',\r\n            borderColor: '#2d81ff',\r\n            borderRadius: '40px',\r\n            boxShadow: '0px 1px 1px 0px #00000026',\r\n            '&.MuiButton-root:hover': {\r\n                borderColor: '#08C8F6',\r\n                color: '#08C8F6',\r\n\r\n            }\r\n        }}>{children}</OutlinedButton>\r\n    );\r\n};\r\n\r\nexport default ForecastPageBackButton;","import React from 'react';\r\nimport {Line} from 'react-chartjs-2';\r\nimport {connect} from \"react-redux\";\r\nimport moment from \"moment\";\r\nimport '../styles/ForecastDay.css'\r\n\r\nconst ForecastDay = (props) => {\r\n\r\n    const hourly = {\r\n        labels: ['00:00', '01:00', '02:00', '03:00', '04:00', '05:00', '06:00', '07:00', '08:00', '09:00', '10:00', '11:00', '12:00', '13:00', '14:00', '15:00', '16:00', '17:00', '18:00', '19:00', '20:00', '21:00', '22:00', '23:00'],\r\n        datasets: [\r\n            {\r\n                label: 'Hourly forecast',\r\n                data: props.tempScale === 'celsius' ? props.hourlyForecast.map((hour) => hour.temp_c) : props.hourlyForecast.map((hour) => hour.temp_f),\r\n                backgroundColor: '#2D81FF',\r\n                borderColor: '#2D81FF',\r\n                color: '#F9FBFF',\r\n                tension: 0.2,\r\n                pointRadius: 0,\r\n                fill: {\r\n                    target: 'origin',\r\n                    above: 'rgba(249, 251, 255, 0.5)',   // Area will be red above the origin\r\n                    below: '#F9FBFF'    // And blue below the origin\r\n                }\r\n\r\n            },\r\n        ],\r\n    };\r\n\r\n    const threeDay = {\r\n        labels: props.threeDay.map((day) => moment(day.date, 'X').format('dddd')),\r\n        datasets: [\r\n            {\r\n                label: 'three-days forecast',\r\n                data: props.tempScale === 'celsius' ? props.threeDay.map((day) => day.temp_c) : props.threeDay.map((day) => day.temp_f),\r\n                backgroundColor: '#2D81FF',\r\n                borderColor: '#2D81FF',\r\n                color: '#F9FBFF',\r\n                tension: 0.2,\r\n                pointRadius: 0,\r\n                fill: {\r\n                    target: 'origin',\r\n                    above: 'rgba(249, 251, 255, 0.5)',   // Area will be red above the origin\r\n                    below: '#F9FBFF'    // And blue below the origin\r\n                }\r\n\r\n            },\r\n        ],\r\n    }\r\n\r\n    const options = {\r\n        chart: {\r\n            default: {\r\n                borderColor: '#fff'\r\n            }\r\n        },\r\n        scales: {\r\n            y: {\r\n                beginAtZero: true,\r\n                grid: {\r\n                    display: false,\r\n                    drawBorder: false,\r\n                },\r\n                ticks: {\r\n                    color: '#2D81FF',\r\n                    callback: function(value, index, values) {\r\n                        return value + '°';\r\n                    }\r\n                },\r\n                title: {\r\n                   display: true,\r\n                    text: 'Temperature',\r\n                    color: '#2D81FF',\r\n                    font: 'Roboto',\r\n                },\r\n            },\r\n            x: {\r\n                grid: {\r\n                    display: false,\r\n                    borderColor: '#2D81FF'\r\n                },\r\n                ticks: {\r\n                    color: '#2D81FF'\r\n                }\r\n            }\r\n        },\r\n        plugins: {\r\n            legend: {\r\n                display: false,\r\n                labels: {\r\n                    font: {\r\n                        color: '#F9FBFF',\r\n                        family: \"'Roboto', sans-serif\"\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n    return (\r\n        <div className='forecast-graph'>\r\n            <Line\r\n                width={580}\r\n                height={280}\r\n                data={props.forecastMod === 'threeDay' ? threeDay : hourly}\r\n                options={options}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    forecastMod: state.weatherData.forecastMod,\r\n    tempScale: state.weatherData.tempScale,\r\n    hourlyForecast: state.weatherData.hourlyForecast,\r\n    threeDay: state.weatherData.threeDayForecast,\r\n})\r\n\r\nexport default connect(mapStateToProps)(ForecastDay);","import React, {useState} from 'react';\r\nimport {ToggleButton, ToggleButtonGroup} from \"@mui/material\";\r\nimport {changeForecastMod} from \"../store/weatherReducer/weatherReducer\";\r\nimport {connect} from \"react-redux\";\r\nimport '../styles/ForecastToggle.css'\r\n\r\nconst ForecastToggle = (props) => {\r\n    if (!localStorage.getItem('forecastScale')) {\r\n        localStorage.setItem('forecastScale', 'threeDay');\r\n    }\r\n    const [value, setValue] = useState(localStorage.getItem('forecastScale'));\r\n    return (\r\n        <div className='forecast-toggle-wrapper'>\r\n            <ToggleButtonGroup\r\n                color='secondary'\r\n                value={value}\r\n                exclusive\r\n                sx={{height: '20px'}}\r\n                fullWidth={true}\r\n                className='forecast-toggle'\r\n                onChange={() => {\r\n                    if (value === 'threeDay') {\r\n                        setValue('hourly')\r\n                        props.changeForecastMod('hourly');\r\n                        localStorage.setItem('forecastScale', 'hourly')\r\n                    } else {\r\n                        setValue('threeDay')\r\n                        props.changeForecastMod('threeDay')\r\n                        localStorage.setItem('forecastScale', 'threeDay')\r\n                    }\r\n                }}\r\n            >\r\n                <ToggleButton\r\n                    value='hourly'\r\n                    sx={{\r\n                        '&.MuiToggleButton-root': {\r\n                            borderRadius: '20px',\r\n                            backgroundColor: 'transparent',\r\n                            borderColor: '#F9FBFF',\r\n                            color: '#2d81ff',\r\n                            textTransform: 'capitalize',\r\n                        },\r\n                        '&.Mui-selected': {\r\n                            backgroundColor: '#6BA6FF',\r\n                            borderColor: '#6BA6FF',\r\n                            color: '#ffffff',\r\n                        },\r\n                        '&.Mui-selected:hover': {\r\n                            backgroundColor: '#5096ff',\r\n                            color: '#ffffff',\r\n                        },\r\n                    }}\r\n                >\r\n                    Hourly\r\n                </ToggleButton>\r\n                <ToggleButton\r\n                    value='threeDay'\r\n                    sx={{\r\n                        '&.MuiToggleButton-root': {\r\n                            borderRadius: '20px',\r\n                            backgroundColor: 'transparent',\r\n                            borderColor: '#F9FBFF',\r\n                            color: '#2d81ff',\r\n                            textTransform: 'capitalize',\r\n                        },\r\n                        '&.Mui-selected': {\r\n                            backgroundColor: '#6BA6FF',\r\n                            borderColor: '#6BA6FF',\r\n                            color: '#ffffff',\r\n                        },\r\n                        '&.Mui-selected:hover': {\r\n                            backgroundColor: '#5096ff',\r\n                            color: '#ffffff',\r\n                        },\r\n                    }}\r\n                >\r\n                    Three-day\r\n                </ToggleButton>\r\n            </ToggleButtonGroup>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    forecastMod: state.weatherData.forecastMod,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    changeForecastMod: (value) => {\r\n        dispatch(changeForecastMod(value));\r\n    },\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ForecastToggle);","import React from 'react';\r\nimport {Link} from \"react-router-dom\";\r\nimport ForecastPageBackButton from \"../components/ForecastPageBackButton\";\r\nimport ForecastDay from \"../components/ForecastDay\";\r\nimport ForecastToggle from \"../components/ForecastToggle\";\r\n\r\nconst ForecastPage = () => {\r\n    return (\r\n        <div className='app app-outlined'>\r\n            <Link to='/SimpleWeather/'>\r\n                <ForecastPageBackButton>Back to home page</ForecastPageBackButton>\r\n            </Link>\r\n            <ForecastDay className='forecast-graph'/>\r\n            <ForecastToggle/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ForecastPage;","import React from 'react';\r\nimport {Redirect, Route, Router, Switch} from 'react-router-dom';\r\nimport WeatherToday from './pages/WeatherToday';\r\nimport {history} from './historyVar';\r\nimport CitiesPage from \"./pages/CitiesPage\";\r\nimport CityPage from \"./pages/CityPage\";\r\nimport ForecastPage from \"./pages/ForecastPage\";\r\n\r\n\r\nconst App = () => {\r\n    return (\r\n        <Router history={history}>\r\n            <Switch>\r\n                <Route exact path='/SimpleWeather'>\r\n                    <WeatherToday/>\r\n                </Route>\r\n                <Route exact path='/SimpleWeather/cities'>\r\n                    <CitiesPage/>\r\n                </Route>\r\n                <Route exact path='/SimpleWeather/cities/:city'>\r\n                    <CityPage/>\r\n                </Route>\r\n                <Route exact path='/SimpleWeather/forecast'>\r\n                    <ForecastPage/>\r\n                </Route>\r\n                <Redirect to='/SimpleWeather'/>\r\n            </Switch>\r\n        </Router>\r\n    );\r\n};\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {Provider} from 'react-redux'\r\nimport store from './store/store'\r\nimport App from './App';\r\nimport './index.css';\r\nimport './styles/adaptiveApp.css'\r\nimport {getCitiesFromLocaleStorage} from \"./store/favoriteCitiesReducer/favoriteCitiesReducer\";\r\nimport {createTheme} from \"@mui/material\";\r\nimport {ThemeProvider} from \"@emotion/react\";\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport {changeTempScale} from \"./store/weatherReducer/weatherReducer\";\r\n\r\nif (!localStorage.getItem('cities')) {\r\n    localStorage.setItem('cities', '[]');\r\n} else {\r\n    const citiesStr = localStorage.getItem('cities')\r\n    const cities = JSON.parse(citiesStr);\r\n    store.dispatch(getCitiesFromLocaleStorage(cities));\r\n}\r\n\r\nif (localStorage.getItem('tempScale')) {\r\n    store.dispatch(changeTempScale(localStorage.getItem('tempScale')))\r\n}\r\n\r\nconst theme = createTheme({\r\n    palette: {\r\n        primary: {\r\n            main: '#ffffff',\r\n            darker: '#ffffff'\r\n        },\r\n        secondary: {\r\n            main: '#2d81ff',\r\n            darker: '#2d81ff'\r\n        }\r\n    }\r\n});\r\n\r\n\r\nconst rootElement = document.getElementById('root')\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <ThemeProvider theme={theme}>\r\n            <BrowserRouter basename='/SimpleWeather'>\r\n                <App/>\r\n            </BrowserRouter>\r\n        </ThemeProvider>\r\n    </Provider>,\r\n    rootElement\r\n)\r\n"],"sourceRoot":""}